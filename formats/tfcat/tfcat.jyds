from org.autoplot import RenderType
setScriptDescription('''Reads TFCat files from MASER website.  These are JSON files where
labelled polygons are stored.  See https://sourceforge.net/p/autoplot/feature-requests/763/''')

from java.lang import System,Double
from java.io import File
from org.das2.util import FileUtil,LoggerManager
from org.json import JSONObject

logger= LoggerManager.getLogger('analysis.TFCat')

#test= getParam( 'test', '3', 'test number', [ '','1','2','3'] )
test= ''

if test=='':
    resourceURI= getParam( 'resourceURI', 'https://maser.obspm.fr/doi/10.25935/nhb2-wy29/content/juno_waves_lesia_tfcat_2016.json')
elif test=='1':
    resourceURI= getParam( 'resourceURI', 'file:/home/jbf/ct/autoplot/data.backup/json/tfcat/10.25935.1fqm-fs07/leblanc_aa_catalogue_emi_1988_v1.0.pp.json')
elif test=='2':
    resourceURI= getParam( 'resourceURI', 'file:/home/jbf/ct/autoplot/data.backup/json/tfcat/10.25935.nhb2-wy29/juno_waves_lesia_tfcat_2016.json')
elif test=='3':
    resourceURI= getParam( 'resourceURI', 'file:/home/jbf/ct/autoplot/data.backup/json/tfcat/10.25935.r11g-6j63/cassini_faraday_patches_2008.json')
else:
    raise Exception('test number')
    
labelOrBounds= getParam( 'mode', 'bounds', 'Load the label or the bounds', [ 'label','bounds','bbox' ] )

if ( labelOrBounds=='label' ):
    labelWith= getParam( 'labelWith', 'feature_type', 'The property used to label the data.', { "examples":['obs_id','meridian_transit','feature_type'] } )
else:
    labelWith= ''
    
theFile= getFile( resourceURI, monitor )

logger.fine( 'reading '+str(theFile) )
ss= FileUtil.readFileToString(theFile)

jo= JSONObject( ss )

logger.fine( 'get the units' )
units= [None,None]
crs= jo.getJSONObject('crs')
properties= crs.getJSONObject('properties')
time_coords= properties.get('time_coords')
sTimeUnits= time_coords.get('unit') + ' since '+ time_coords.get('time_origin')
timeUnits= Units.lookupTimeUnits( sTimeUnits )
units[0]= timeUnits
sunits=properties.get('spectral_coords').get('unit')
units[1]= Units.lookupUnits(sunits)

fs= jo.getJSONArray('features')
logger.fine( 'number of features: %d' % fs.length() )

dsb= DataSetBuilder(2,100,2)
dsn= DataSetBuilder(2,100,3)
dsn.putProperty( QDataSet.RENDER_TYPE, 'digital' )

nom= Units.nominal()
fill= Double.NaN
for i in xrange(fs.length()):
    f= fs.get(i)
    if ( labelOrBounds=='bbox' ):
        g= f.get('bbox')
        print g.get(0), g.get(2), units[0].createDatum(g.get(0)), units[0].createDatum(g.get(2)) 
        print g.get(1), g.get(3), units[1].createDatum(g.get(1)), units[1].createDatum(g.get(3))
        
        dsb.setUnits(0,units[0])
        dsb.setUnits(1,units[1])
        if ( dsb.length>0 ):  # insert fill record to break the connecting line
            dsb.nextRecord( [ fill, fill ] ) 
            stop 
        dsb.nextRecord( [ g.get(0), g.get(1) ] )
        dsb.nextRecord( [ g.get(2), g.get(1) ] )
        dsb.nextRecord( [ g.get(2), g.get(3) ] )
        dsb.nextRecord( [ g.get(0), g.get(3) ] )
        dsb.nextRecord( [ g.get(0), g.get(1) ] )

    else:
        if ( f.get('type')=='Feature' ):
            g= f.get('geometry')
            typ= g.get('type')
            if typ=='Polygon':
                c= g.get('coordinates')
                logger.finer( 'loading feature: %d' % c.length() )
                dsb.setUnits(0,units[0])
                dsb.setUnits(1,units[1])
                dsn.setUnits(0,units[0])
                dsn.setUnits(1,units[1])
                sumx= 0
                basex= 0  # This will be needed for times, I think.
                sumy= 0
                sumn= 0
                for j in xrange(c.length()):
                    p0= c.getJSONArray(j)
                    if ( j==0 ):
                        p= p0.getJSONArray(0)
                        basex= p.get(0)
                    for k in xrange(p0.length()):
                        p= p0.getJSONArray(k)
                        dsb.nextRecord( [ p.get(0), p.get(1) ] )
                        sumx= sumx + ( p.get(0) - basex )
                        sumy= sumy + log10( p.get(1) )
                        sumn= sumn + 1
                    featureType= f.get('properties').optString(labelWith,'')
                    #featureType= f.get('properties').get('feature_type')
                    avgx= sumx/sumn +  basex
                    avgy= pow( 10, sumy/sumn )
                    dsn.nextRecord( [ avgx, avgy, nom.createDatum( featureType ) ] )
            elif typ=='MultiPoint' or typ=='LineString':
                c= g.get('coordinates')
                logger.finer( 'loading feature: %d' % c.length() )
                dsb.setUnits(0,units[0])
                dsb.setUnits(1,units[1])
                dsn.setUnits(0,units[0])
                dsn.setUnits(1,units[1])
                sumx= 0
                basex= 0  
                sumy= 0
                sumn= 0
                for j in xrange(c.length()):
                    p= c.getJSONArray(j)
                    if ( j==0 ): basex=p.get(0)
                    dsb.nextRecord( [ p.get(0), p.get(1) ] )
                    sumx= sumx + ( p.get(0) - basex )
                    sumy= sumy + log10( p.get(1) )
                    sumn= sumn + 1
                featureType= f.get('properties').optString(labelWith,'')
                avgx= sumx/sumn +  basex
                avgy= pow( 10, sumy/sumn )
                dsn.nextRecord( [ avgx, avgy, nom.createDatum( featureType ) ] )            
        if ( dsb.length>0 ):  # insert fill record to break the connecting line
            dsb.nextRecord( [ fill, fill ] )  
    
ds= dsb.getDataSet()

if len(ds)==0:
    result= None
    
else:
    bounds = dataset( ds[:,0], ds[:,1], renderType='line' )
    labels= dsn.getDataSet()

    if labelOrBounds=='bounds':
        result= bounds
    elif labelOrBounds=='bbox':
        result= bounds
    else:
        result= labels
    
